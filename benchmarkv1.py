# -*- coding: utf-8 -*-
"""Copy of Code_for_tuesday_presentation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1B-xQ_gI3ad3UUcfb8weqgPjHajeNV1wc
"""
"""
from git import Repo

Repo.clone_from("https://github.com/scott-deverinne/TextAttack.git")

import sys
sys.path.insert(0,'/content/TextAttack')

#cd TextAttack

pip install -e .[dev]

!pip3 install transformers
"""
import csv
 
# field names 
fields = ['Model', 'Attack', 'Number of successful attacks', 'Number of failed attacks',
          'Original accuracy', 'Accuracy under attack', 'Attack success rate',
          'Average perturbed word %', 'Average num. words per input', 'Datasets']
    
# name of csv file 
filename = "test_results.csv"
    
# writing to csv file 
with open(filename, 'w') as csvfile: 
    # creating a csv writer object 
    csvwriter = csv.writer(csvfile) 
        
    # writing the fields 
    csvwriter.writerow(fields)

import textattack

import transformers
from textattack.models.wrappers import HuggingFaceModelWrapper
from textattack.datasets import HuggingFaceDataset
# textfooler
from textattack.attack_recipes import TextFoolerJin2019
#TextFooler_attack = TextFoolerJin2019.build(model_wrapper)
# textbugger
from textattack.attack_recipes import TextBuggerLi2018
#TextBugger_attack = TextBuggerLi2018.build(model_wrapper)
# deepwordbug
from textattack.attack_recipes import DeepWordBugGao2018
#DeepWordBug_attack = DeepWordBugGao2018.build(model_wrapper)
# bert-attack
from textattack.attack_recipes import BERTAttackLi2020
#BERTAttack_attack = BERTAttackLi2020.build(model_wrapper)
from tqdm import tqdm # tqdm provides us a nice progress bar.
from textattack.loggers import CSVLogger # tracks a dataframe for us.
from textattack.attack_results import SuccessfulAttackResult
from textattack import Attacker
from textattack import AttackArgs
from textattack.datasets import Dataset

"""Multi-processing"""

from multiprocessing import Process

"""
def display(my_name):
  print ('Hi !!!' + " " + my_name)
if __name__ == '__main__':
  p = Process(target=display, args=('Python',))
  p.start()
  p.join()
"""

def model_wrapper_func(w_path, dataset_name, attack_b_name):
  model = transformers.AutoModelForSequenceClassification.from_pretrained(w_path)
  tokenizer = transformers.AutoTokenizer.from_pretrained(w_path)

  model_wrapper = HuggingFaceModelWrapper(model, tokenizer)

  # Create the goal function using the model
  from textattack.goal_functions import UntargetedClassification
  goal_function = UntargetedClassification(model_wrapper)

  # Import the dataset
  from textattack.datasets import HuggingFaceDataset
  dataset = HuggingFaceDataset(dataset_name, None, "test")

  attack = attack_b_name.build(model_wrapper)
  
  attack_args = AttackArgs(num_examples=10)

  attacker = Attacker(attack, dataset, attack_args)

  attack_results = attacker.attack_dataset()

def benchmark_system(m_path, dataset_name, attack_b_name):
  # function 1: import the model
  """
  m_path = textattack/bert-base-uncased-ag-news
  dataset_name = ag_news
  """
  dataset = model_wrapper_func(m_path, dataset_name, attack_b_name)
  # function 2: managing the attack
  """
  repeat this benchmark system for each attack
  """

from textattack.attack_recipes import TextFoolerJin2019
if __name__ == '__main__':
  p = Process(target=benchmark_system, args=('textattack/bert-base-uncased-ag-news', 'ag_news', TextFoolerJin2019))
  p.start()
  p.join()
